// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id Int  @id @default(autoincrement())
  email String  @unique
  password String

  token Token[]
  articles Article[]
  comments Comment[]
  likes Like[]
}

model Token {
  id Int  @id @default(autoincrement())
  refreshToken String

  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
}

model Article {
  id Int  @id @default(autoincrement())
  content String
  likeCount Int @default(0)
  commentCount Int @default(0)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  
  likes Like[]
  comments Comment[]
}

model Like {
  id Int  @id @default(autoincrement())
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId],references: [id], onDelete: Cascade)
  userId Int

  article Article @relation(fields: [articleId],references: [id], onDelete: Cascade)
  articleId Int
}

model Comment {
  id Int  @id @default(autoincrement())
  content String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId],references: [id], onDelete: Cascade)
  userId Int

  article Article @relation(fields: [articleId],references: [id], onDelete: Cascade)
  articleId Int
}
